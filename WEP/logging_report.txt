تقرير شامل عن استخدام رسائل Logging في المشروع
=========================================

1. تكوين Logging الأساسي
------------------------
في ملف model.py:
```python
logging.basicConfig(
    filename='app.log',
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
```

2. استخدام Logging في عمليات قاعدة البيانات
----------------------------------------
في ملف model.py:

أ. في دالة الاتصال بقاعدة البيانات:
```python
@db_connection
def wrapper(*args, **kwargs):
    logger.debug(f"Attempting database connection to: {db_path}")
    # ...
    logger.debug(f"Database operation completed successfully: {func.__name__}")
    # ...
    logger.error(f"Database error: {str(e)}")
    logger.debug(f"Error occurred in function: {func.__name__} with args: {args}, kwargs: {kwargs}")
    # ...
    logger.debug("Database connection closed")
```

ب. في دالة تهيئة قاعدة البيانات:
```python
def initialize_database():
    logger.debug("Starting database initialization")
    # ...
    logger.debug("Users table created/verified")
    logger.debug("Tokens table created/verified")
    logger.info("Database initialized successfully!")
    logger.error(f"Database initialization error: {str(e)}")
    logger.debug(f"Full error details: {e.__class__.__name__}: {str(e)}")
    logger.debug("Database connection closed after initialization")
```

3. استخدام Logging في عمليات المستخدم
----------------------------------
في ملف controller.py:

أ. في عملية تسجيل الدخول:
```python
@app.route('/login', methods=['GET', 'POST'])
def login():
    logger.debug(f"Login attempt - Username: {username}")
    logger.debug(f"Request headers: {dict(request.headers)}")
    logger.warning(f"Login failed - User not found: {username}")
    logger.debug(f"User authenticated successfully: {username}")
    logger.debug(f"User session data: {dict(session)}")
    logger.debug(f"Generated new token for user {username}: {token}")
    logger.debug(f"Device info: {device_info}")
    logger.debug(f"Token saved successfully for user {username}")
    logger.info(f"تم تسجيل دخول المستخدم بنجاح: {username}")
    logger.error(f"خطأ في حفظ التوكن: {str(e)}")
    logger.debug(f"Token save error details: {e.__class__.__name__}: {str(e)}")
```

ب. في عملية التسجيل:
```python
@app.route('/register', methods=['GET', 'POST'])
def register():
    logger.debug(f"Registration attempt - Username: {username}, Phone: {phone}")
    logger.debug(f"Request headers: {dict(request.headers)}")
    logger.warning(f"Registration failed - Username already exists: {username}")
    logger.warning(f"Registration failed - Phone already exists: {phone}")
    logger.info(f"New user registered: {username}")
    logger.debug(f"User registration details - Username: {username}, Phone: {phone}")
    logger.error(f"Error creating user: {str(e)}")
    logger.debug(f"User creation error details: {e.__class__.__name__}: {str(e)}")
```

4. استخدام Logging في الاختبارات
-----------------------------
في ملف tests/unittest_test.py:
```python
logging.basicConfig(
    filename='test.log',
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# في الاختبارات
logger.debug("Test client initialized")
logger.debug("Testing home page access")
logger.debug(f"Home page response status: {response.status_code}")
logger.debug("Testing user registration")
logger.debug(f"Registration response status: {response.status_code}")
logger.debug(f"Response data: {response.data.decode()}")
logger.debug("Registration successful, testing login")
logger.debug(f"Login response status: {login_response.status_code}")
logger.debug(f"Login response data: {login_response.data.decode()}")
logger.info("Starting test suite")
```

5. مستويات Logging المستخدمة
--------------------------
1. DEBUG: للتفاصيل التقنية والمعلومات التشخيصية
   - محاولات الاتصال بقاعدة البيانات
   - تفاصيل العمليات الناجحة
   - معلومات الطلبات والاستجابات

2. INFO: للمعلومات العامة عن العمليات الناجحة
   - تسجيل دخول المستخدمين
   - إنشاء حسابات جديدة
   - تهيئة قاعدة البيانات

3. WARNING: للتنبيهات والمشاكل غير الحرجة
   - محاولات تسجيل دخول فاشلة
   - محاولات تسجيل مستخدمين موجودين
   - أخطاء في التحقق من البيانات

4. ERROR: للأخطاء الحرجة
   - أخطاء قاعدة البيانات
   - أخطاء في حفظ التوكن
   - أخطاء في إنشاء المستخدمين

6. ملفات السجل
------------
1. app.log: للسجلات العامة للتطبيق
2. test.log: لسجلات الاختبارات

7. تنسيق السجلات
--------------
جميع السجلات تتبع نفس التنسيق:
%(asctime)s - %(name)s - %(levelname)s - %(message)s

مثال:
2024-03-14 10:30:45,123 - model - DEBUG - Attempting database connection to: users.db

8. ملاحظات هامة
------------
1. يتم استخدام logging بشكل منهجي في جميع أنحاء التطبيق
2. يتم تسجيل جميع العمليات المهمة والأخطاء
3. يتم استخدام مستويات مختلفة من logging حسب أهمية الرسالة
4. يتم حفظ السجلات في ملفات منفصلة للتطبيق والاختبارات
5. يتم تضمين معلومات مفيدة مثل:
   - الطوابع الزمنية
   - أسماء الوحدات
   - مستويات السجل
   - رسائل مفصلة
   - معلومات الأخطاء والاستثناءات

9. توصيات للتحسين
---------------
1. إضافة تناوب السجلات (log rotation) لتجنب كبر حجم الملفات
2. إضافة تصفية السجلات حسب المستوى
3. إضافة تنسيق مختلف للسجلات في بيئة الإنتاج
4. إضافة سياق إضافي للسجلات مثل معرف المستخدم
5. تحسين رسائل الخطأ لتكون أكثر وضوحاً 